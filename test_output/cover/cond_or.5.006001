Reading database from /home/pjcj/g/perl/svk/dc/cover_db


------------------------------------------ ------ ------ ------ ------ ------
File                                         stmt   bran   cond    sub  total
------------------------------------------ ------ ------ ------ ------ ------
tests/cond_or                                80.9   30.0   72.3    0.0   67.8
Total                                        80.9   30.0   72.3    0.0   67.8
------------------------------------------ ------ ------ ------ ------ ------


Run: ...
Perl version: ...
OS: ...
Start: ...
Finish: ...

tests/cond_or

line  err   stmt   bran   cond    sub   code
1                                       #!/usr/bin/perl
2                                       
3                                       # Copyright 2002-2009, Paul Johnson (pjcj@cpan.org)
4                                       
5                                       # This software is free.  It is licensed under the same terms as Perl itself.
6                                       
7                                       # The latest version of this software should be available from my homepage:
8                                       # http://www.pjcj.net
9                                       
10                                      use strict;
11                                      use warnings;
12                                      
13             1                        my @x;
14                                      
15             1                        my $y  = 1;
16             1                        my $z  = 0;
17             1                        $::foo = 17;
18                                      
19    ***      1     50                 if ($] >= 5.009)
20                                      {
21    ***      0                            $ENV{PATH} = "/bin";
22    ***      0                            system "pwd";
23                                          use lib "tests";
24    ***      0                            my $file = "cond_or.pl";
25    ***      0      0                     unless (my $return = do $file)
26                                          {
27    ***      0      0                         die "couldn't parse $file: $@" if $@;
28    ***      0      0                         die "couldn't do $file: $!"    unless defined $return;
29    ***      0      0                         die "couldn't run $file"       unless $return;
30                                          }
31                                      }
32                                      
33             1                        for (0 .. 10)
              11                        
34                                      {
35    ***     11     50                     $y ||
36                                              $x[1]++;
37                                      
38    ***     11     50     33              $y ||
39                                              $x[0]++ ||
40                                              $x[1]++;
41                                      
42    ***     11     50                     $x[2]++
43                                              unless $z;
44                                      
45            11                            for (0 .. 2)
              33                        
46                                          {
47            33                                $x[3]++;
48                                          }
49                                      
50    ***     11     50                     if ($z)
51                                          {
52    ***      0                                $x[4]++;
53                                          }
54                                          else
55                                          {
56            11                                $x[5]++;
57                                          }
58                                      
59    ***     11            33              my $p = $y || $z;
60    ***     11            33              my $q = $z || $y;
61            11           100              my $r = $_ || "qqq";
62            11           100              my $s = $_ || [];
63            11                            my $t = $y | $z;
64    ***     11            50              my $u = $y || 0;
65    ***     11            50              my $v = $y || undef;
66    ***     11            50              my $w = $z || 0;
67                                      
68    ***     11            50              $p     ||= $y;
69    ***     11            50              $p     ||= $z;
70            11           100              $x[ 6] ||= $y;
71    ***     11            50              $x[ 7] ||= $z;
72            11           100              $x[ 8] ||= 1;
73            11           100              $x[ 9] ||= {};
74            11           100              $x[10] ||= \"foo";
75            11           100              $x[11] ||= \$y;
76            11           100              $x[12] ||= \*STDIO;
77    ***     11           100      0       $x[13] ||= sub { 1 };
      ***      0                        
78            11           100              $x[14] ||= *::foo{SCALAR};
79    ***     11            50              $x[15] ||= *STDIO{IO};
80            11           100              $x[16] ||= bless {}, "XXX";
81            11           100              $x[17] ||= <<"EOD";
82                                      blah
83                                      EOD
84    ***     11     50                     cond_dor(\@x) if exists &cond_dor;
85                                      }
86                                      
87                                      # print join(", ", @x), "\n";


Branches
--------

line  err      %   true  false   branch
----- --- ------ ------ ------   ------
19    ***     50      0      1   if ($] >= 5.009)
25    ***      0      0      0   unless (my $return = do $file)
27    ***      0      0      0   if $@
28    ***      0      0      0   unless defined $return
29    ***      0      0      0   unless $return
35    ***     50      0     11   unless $y
38    ***     50      0     11   unless $y or $x[0]++
42    ***     50     11      0   unless $z
50    ***     50      0     11   if ($z) { }
84    ***     50      0     11   if exists ->{Deparse error: Can't locate object method "name" via package "B::NULL" (perhaps you forgot to load "B::NULL"?) at /usr/local/pkg/perl-5.6.1/lib/5.6.1/i686-linux/B/Deparse.pm line 409.
}


Conditions
----------

or 2 conditions

line  err      %      l     !l   expr
----- --- ------ ------ ------   ----
61           100     10      1   $_ || 'qqq'
62           100     10      1   $_ || []
64    ***     50     11      0   $y || 0
65    ***     50     11      0   $y || undef
66    ***     50      0     11   $z || 0
68    ***     50     11      0   $p ||= $y
69    ***     50     11      0   $p ||= $z
70           100     10      1   $x[6] ||= $y
71    ***     50      0     11   $x[7] ||= $z
72           100     10      1   $x[8] ||= 1
73           100     10      1   $x[9] ||= {}
74           100     10      1   $x[10] ||= \('foo')
75           100     10      1   $x[11] ||= \$y
76           100     10      1   $x[12] ||= \*STDIO
77           100     10      1   $x[13] ||= sub {
	1;
}

78           100     10      1   $x[14] ||= *foo{'SCALAR'}
79    ***     50      0     11   $x[15] ||= *STDIO{'IO'}
80           100     10      1   $x[16] ||= bless({}, 'XXX')
81           100     10      1   $x[17] ||= "blah\n"

or 3 conditions

line  err      %      l  !l&&r !l&&!r   expr
----- --- ------ ------ ------ ------   ----
38    ***     33     11      0      0   $y or $x[0]++
59    ***     33     11      0      0   $y || $z
60    ***     33      0     11      0   $z || $y


Uncovered Subroutines
---------------------

Subroutine Count Location        
---------- ----- ----------------
__ANON__       0 tests/cond_or:77


